{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","apiError","apiSuccess","addStudent","handleStudentDelete","bind","handleStudentAdd","handleAddStudentChange","_id","fetch","method","body","JSON","stringify","json","console","error","this","setState","response","data","event","target","value","log","className","api_success","map","e","style","display","name","dob","onClick","onSubmit","type","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SA+FeA,G,kBA3Fb,aAAe,IAAD,8BACZ,+CACOC,MAAQ,CACXC,UAAU,EACVC,YAAY,EACZC,YAAY,GAGd,EAAKC,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBAC3B,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,uBAAyB,EAAKA,uBAAuBF,KAA5B,gBAVpB,E,yHAeYG,G,gFAEP,KACJ,K,SACMC,MAAM,wBAAyB,CAACC,OAAQ,SAAUC,KAAMC,KAAKC,UAAU,CAACL,U,cACrEM,O,gDAEpBC,QAAQC,MAAR,MACAC,KAAKC,SAAS,CAACjB,SAAS,EAAD,K,6LAIJO,G,wFAEfW,EAAW,KACXC,EAAO,K,SACMX,MAAM,wBAAyB,CAACC,OAAQ,OAAQC,KAAMC,KAAKC,UAAU,CAACL,U,OAAvFW,E,OACAC,EAAOD,EAASL,OAChBG,KAAKC,SAAS,CAAChB,WAAYkB,I,kDAE3BL,QAAQC,MAAR,MACAC,KAAKC,SAAS,CAACjB,SAAS,EAAD,K,4JAIJoB,GACrBJ,KAAKC,SAAS,CACZf,WAAYkB,EAAMC,OAAOC,U,0KAMrBJ,EAAW,KACXC,EAAO,K,SACMX,MAAM,yB,OAAvBU,E,OACAC,EAAOD,EAASL,OAChBG,KAAKC,SAAS,CAAEhB,WAAYkB,I,kDAE5BL,QAAQS,IAAR,MACAP,KAAKC,SAAS,CAAEjB,SAAS,EAAD,K,6IAKlB,IAAD,OACP,OACE,yBAAKwB,UAAU,iBACb,4BAAQA,UAAU,cAEhB,yBAAKA,UAAU,SACb,wCACCR,KAAKjB,MAAME,YAAce,KAAKjB,MAAM0B,YAAYC,IAAI,SAACC,GAAD,OACnD,yBAAKC,MAAO,CAACC,QAAS,WACpB,2BAAIF,EAAEG,MACN,2BAAIH,EAAEI,KACN,4BAAQC,QAAS,kBAAI,EAAK7B,oBAAoBwB,EAAEpB,OAAhD,cAKN,yBAAKiB,UAAU,SAEb,6CACA,0BAAMS,SAAUjB,KAAKX,kBACnB,2BAAO6B,KAAK,OAAOZ,MAAON,KAAKjB,MAAMG,WAAYiC,SAAUnB,KAAKV,yBAChE,4BAAQ4B,KAAK,UAAb,kB,GAlFIE,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c41ea336.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n      this.state = {\n        apiError: false,\n        apiSuccess: false,\n        addStudent: false,\n      }\n\n      this.handleStudentDelete = this.handleStudentDelete.bind(this)\n      this.handleStudentAdd = this.handleStudentAdd.bind(this)\n      this.handleAddStudentChange = this.handleAddStudentChange.bind(this)\n\n  }\n\n\n  async handleStudentDelete(_id) {\n    try  {\n      let response = null; \n      let data = null;\n      response = await fetch('localhost:3000/users/', {method: \"delete\", body: JSON.stringify({_id})})\n      response = response.json()\n    } catch(e) {\n      console.error(e)\n      this.setState({apiError: e})\n    }\n  }\n\n  async handleStudentAdd(_id) {\n    try  {\n      let response = null; \n      let data = null;\n      response = await fetch('localhost:3000/users/', {method: \"post\", body: JSON.stringify({_id})})\n      data = response.json()\n      this.setState({apiSuccess: data})\n    } catch(e) {\n      console.error(e)\n      this.setState({apiError: e})\n    }\n  }\n\n  handleAddStudentChange(event) {\n    this.setState({\n      addStudent: event.target.value\n    });\n  }\n\n  async componentDidMount() {\n    try {\n      let response = null; \n      let data = null;\n      response = await fetch('localhost:3000/users/')\n      data = response.json()\n      this.setState({ apiSuccess: data })\n    } catch(e) {\n      console.log(e)\n      this.setState({ apiError: e })\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <header className=\"App-header\">\n\n          <div className=\"col-6\">\n            <h1>Students</h1>\n            {this.state.apiSuccess && this.state.api_success.map((e) => (\n              <div style={{display: \"inline\"}}>\n                <p>{e.name}</p>\n                <p>{e.dob}</p>\n                <button onClick={()=>this.handleStudentDelete(e._id)}>Delete</button>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"col-6\">\n\n            <h1>Add a student</h1>\n            <form onSubmit={this.handleStudentAdd}>\n              <input type=\"text\" value={this.state.addStudent} onChange={this.handleAddStudentChange} />\n              <button type=\"submit\">Submit</button>\n            </form>\n          </div>\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}